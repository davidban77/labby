name: Docker Push

on:
  # pull_request:
  #   branches: [main]
  workflow_run:
    workflows: [Docker Build]
    branches: [main, "release-v**", develop]
    types: [completed]

jobs:
  build-and-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup the python version, and dependencies
      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      # Installing and configuring poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cache venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies (if no cache)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: "gitbranch"

      - run: echo "##[set-output name=version;]$(poetry version | awk 'END {print $NF}')"
        id: "pkg_ver"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Docker Metadata"
        id: "dockermeta"
        uses: "docker/metadata-action@v3"
        with:
          images: "${{ secrets.DOCKERHUB_USERNAME }}/labby"
          flavor: |
            latest=false
          tags: |
            type=semver,pattern=v{{steps.pkg_ver.outputs.version}}-py${{ matrix.python-version }}
            type=semver,pattern=v{{steps.pkg_ver.outputs.version}},enable=${{ matrix.python-version == 3.7 }}
            type=raw,value=stable,enable=${{ matrix.python-version == 3.7 }}
            type=raw,value=stable-py${{ matrix.python-version }}
            type=raw,value=v{{steps.pkg_ver.outputs.version}}-py${{ matrix.python-version }}
          labels: |
            org.opencontainers.image.title=labby
      - name: "Build"
        uses: "docker/build-push-action@v2"
        with:
          push: true
          target: labby
          file: "./Dockerfile"
          # platforms: "linux/amd64,linux/arm64"
          tags: "${{ steps.dockermeta.outputs.tags }}"
          labels: "${{ steps.dockermeta.outputs.labels }}"
          cache-from: "type=gha,scope=labby-${{ steps.gitbranch.outputs.branch }}"
          cache-to: "type=gha,mode=max,scope=labby-${{ steps.gitbranch.outputs.branch }}"
          context: "./"
          build-args: |
            PYTHON_VER=${{ matrix.python-version }}

      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     push: true
      #     build-args: "PYTHON_VER=${{ matrix.python-version }}"
      #     target: labby
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/labby:v${{  }}-py${{ matrix.python-version }}
